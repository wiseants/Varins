#if !defined(AFX_XSPIMIRTEC_H__A6C532A2_6327_4924_B471_390B5B51CC6D__INCLUDED_)
#define AFX_XSPIMIRTEC_H__A6C532A2_6327_4924_B471_390B5B51CC6D__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CXSPIMirTec wrapper class

class CXSPIMirTec : public CWnd
{
protected:
	DECLARE_DYNCREATE(CXSPIMirTec)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x79dbd8f0, 0x5d41, 0x4a28, { 0xa2, 0x18, 0x3d, 0xbb, 0x5f, 0xaa, 0xc3, 0x7f } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	BOOL GetUseFunctionProfile();
	void SetUseFunctionProfile(BOOL);
	BOOL GetExportGratingImage();
	void SetExportGratingImage(BOOL);

// Operations
public:
	void ChangeBrightness(short nWhant, short nLevel);
	void FindPhase(short nWhat);
	short GetActiveChannel();
	short GetImageHeight(short nChannel);
	short GetImageWidth(short nChannel);
	VARIANT GetSCInfo();
	VARIANT GetSPIInfo();
	short Grab(short nWhat);
	short Initialize();
	short Live(short nChannel);
	BOOL LoadRefPhase();
	BOOL PZTCalibration(short nWhat);
	short PZTCalInitialize();
	short PZTCalTerminate();
	short PZTGrabImage(short nWhat);
	short Reset();
	void ROIInspect(short nMode, short nROINum, const VARIANT& stuSolder);
	BOOL SaveRefPhase();
	void SetCriticalHeight(short nCriticalHeight);
	short SetDefaultLight(short nWhat);
	BOOL SetImageSize(short nWidth, short nHeight);
	void SetTiltRange(short nX, short nY);
	void SetTotalOBJImage(short nTotal);
	void SetZCalibParameters(float fHeight, short nRank, short nColumn, short nNumRepeat, float fOffsetHeight);
	void ShowFOVLine(BOOL bFOVLine);
	short Stop(short nChannel);
	short Terminate();
	void ZCalibration(short nMode, short nROINum, const VARIANT& stuSolder);
	BOOL SetComPort(short ComPort, long BuadRate, short ByteSize, short StopBits, short Parity);
	void SetHookFunction(long nType, const VARIANT& vUserDataPtr);
	void ProbeHwEnvSet(const VARIANT& pCtrl, short Exposure, short Reset, short Grab, short PztGrab, short IOStatus1, short IOStatus2, short IOStatus3);
	void SetProbeSel(short nWhat);
	void SetOwnerPtr(const VARIANT& vOwner);
	void SetLogEnable(short nWhat);
	void ScanMode(short nWhat);
	long Firmware_Ver();
	void CheckIntensity();
	void SetROI(short nMode, short nROINum, const VARIANT& stuSolder);
	long GetFocusSensitivity();
	long CheckScanMode();
	short SetLaneCount(short nCount);
#if defined(_SPI_PROBE_THREAD)
	short LoadCalibData(short nLane, short nProbe, short* RefDir, short* ZCalDir, short* HeightDir);
#else
	short LoadCalibData(short nLane, short nProbe, short* RefDir, short* ZCalDir);
#endif
	short EnableLane(short nLane);
	CString GetLastError();
#if defined(_SPI_PROBE_THREAD)
	short SetNumThread4Inspect(short nNumThread);
	short GetNumThread4Inspect();
	short SetUseHeightCal(short nUse);
	short GetUseHeightCal();
	void SaveFunctionProfile(LPCTSTR fileName);
	void SetZCalData(short nProbe, float* pRefPhase, float* pZCalCoef1, float* pZCalCoef2);
#endif
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_XSPIMIRTEC_H__A6C532A2_6327_4924_B471_390B5B51CC6D__INCLUDED_)
